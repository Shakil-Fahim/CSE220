# -*- coding: utf-8 -*-
"""Copy of Lab 2 - 2220Singly & Doubly LinkedList [Python].ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M7PCnixTqmOZhwIBsQR6gIQQmm9jFkaz
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

"""# **Singly Linked List**

1.   Be careful in which question you are required to change the given Linked list and where you are required to create a new one
2.   Be careful of the first node and the last node [aka corner cases]
3.   Do not use any other data structure other than Linked List

**You must Run this cell for your driver code to Singly LL tasks to execute successfully**
"""

#Run this cell
class Node:
  def __init__(self,elem,next = None):
    self.elem,self.next = elem,next

def createList(arr):
  head = Node(arr[0])
  tail = head
  for i in range(1,len(arr)):
    newNode = Node(arr[i])
    tail.next = newNode
    tail = newNode
  return head

def printLinkedList(head):
  temp = head
  while temp != None:
    if temp.next != None:
      print(temp.elem, end = '-->')
    else:
      print(temp.elem)
    temp = temp.next
  print()

"""**Task 1:** Alternate Merge"""

def alternate_merge(head1, head2):
  #TO DO
    dumy = Node(None)
    current = dumy
    flag = True

    while head1 and head2:
        if flag:
            current.next = head1
            head1 = head1.next
        else:
            current.next = head2
            head2 = head2.next
        current = current.next
        flag = not flag
    if head1:
        current.next = head1
    if head2:
        current.next = head2

    return dumy.next
print('==============Test Case 1=============')
head1 = createList(np.array([1,2,6,8,11]))
head2 = createList(np.array([5,7,3,9,4]))

print("Linked List 1:")
printLinkedList(head1)
print("Linked List 2:")
printLinkedList(head2)

head = alternate_merge(head1, head2)
print("Merged Linked List:")
printLinkedList(head)    #This should print    1 --> 5 --> 2 --> 7 --> 6 --> 3 --> 8 --> 9 --> 11 --> 4


print('==============Test Case 2=============')
head1 = createList(np.array([5, 3, 2, -4]))
head2 = createList(np.array([-4, -6, 1]))

print("Linked List 1:")
printLinkedList(head1)
print("Linked List 2:")
printLinkedList(head2)

head = alternate_merge(head1, head2)
print("Merged Linked List:")
printLinkedList(head)    #This should print    5 → -4 -> 3 → -6 -> 2 -> 1 -> -4


print('==============Test Case 3=============')
head1 = createList(np.array([4, 2, -2, -4]))
head2 = createList(np.array([8, 6, 5, -3]))

print("Linked List 1:")
printLinkedList(head1)
print("Linked List 2:")
printLinkedList(head2)

head = alternate_merge(head1, head2)
print("Merged Linked List:")
printLinkedList(head)    #This should print   4-> 8 → 2-> 6 → -2 → 5 → -4 -> -3

"""**Task 2:** Word Decoder"""

def word_Decoder(head):
    #TO DO
    if head == None:
        return None
    count1  = 0
    temp = head
    while temp != None:
        count1 += 1
        temp = temp.next
    if count1==0:
        return None
    x = 13 % count1
    new_head = Node(None)
    new_temp= new_head
    current=head
    idx=0
    while current != None:
        if idx % x == 0:
            new_temp.next = Node(current.elem)
            new_temp = new_temp.next
        current = current.next
        idx += 1
    return new_head.next

#Driver Code
print('==============Test Case 1=============')
head = createList(np.array(['B', 'M', 'D', 'T', 'N', 'O', 'A', 'P', 'S', 'C']))
print("Encoded Word:")
printLinkedList(head) #This should print B→M→D→T→N→O→A→P→S→C

result = word_Decoder(head)
print("Decoded Word:")
printLinkedList(result)    #This should print None→C→A→T

print('==============Test Case 2=============')

head = createList(np.array(['Z', 'O', 'T', 'N', 'X']))
print("Encoded Word:")
printLinkedList(head) #This should print Z→O→T→N→X

result = word_Decoder(head)
print("Decoded Word:")
printLinkedList(result)    #This should print None→N

"""**Task 3:** ID Generator"""

def idGenerator(head1, head2, head3):
  #TO DO


print('==============Test Case 1=============')
head1 = createList(np.array([0,3,2,2]))
head2 = createList(np.array([5,2,2,1]))
head3 = createList(np.array([4,3,2,1]))

print("Linked List 1:")
printLinkedList(head1)
print("Linked List 2:")
printLinkedList(head2)
print("Linked List 3:")
printLinkedList(head3)

result = idGenerator(head1, head2, head3)
print("New ID:")
printLinkedList(result)    #This should print  2 → 2 → 3 → 0 → 9 → 5 → 4 → 2


print('==============Test Case 2=============')
head1 = createList(np.array([0,3,9,1]))
head2 = createList(np.array([3,6,5,7]))
head3 = createList(np.array([2,4,3,8]))

print("Linked List 1:")
printLinkedList(head1)
print("Linked List 2:")
printLinkedList(head2)
print("Linked List 3:")
printLinkedList(head3)

result = idGenerator(head1, head2, head3)
print("New ID:")
printLinkedList(result)    #This should print 1 → 9 → 3 → 0 → 5 → 0 → 8 → 5

"""# **Doubly Linked List**

For this part, you should write your full code in the following cells along with your driver codes on your own.
"""

class Patient:
  #write a constructor
  def __init__(self, id, name, age, bloodgroup, next, prev):
    self.id = id
    self.name = name
    self.age = age
    self.bloodgroup = bloodgroup
    self.next = next
    self.prev = prev

class WRM:

  def __init__(self):
    #Creating the dummy head
    self.dh = Patient(None,None,None,None,None,None)
    self.dh.next = self.dh
    self.dh.prev = self.dh

  def registerPatient(self,id, name, age, bloodgroup):
    #To Do
    newpatient=Patient(id, name, age, bloodgroup,None,None)
    tail=self.dh.prev
    tail.next=newpatient
    newpatient.prev=tail
    newpatient.next=self.dh
    self.dh.prev=newpatient
    print(f"Patient {name} succsessfully added")

  def servePatient(self):
    #To Do
    if self.dh.next==self.dh:
        print("No patient to serve.")
        return
    firstpatient=self.dh.next
    self.dh.next=firstpatient.next
    firstpatient.next.perv=self.dh
    print(f"patient{firstpatient.name} has been remooved")
  def showAllPatient(self):
    #To Do
    if self.dh.next==self.dh:
        print("No patients in the waitting room.")
        return
    print("patient in waitting")
    current=self.dh.next
    while current != self.dh:
        print(f"id:{current.id}, name:{current.name}, age:{current.age}, bloodgroup:{current.bloodgroup}")
        current=current.next
  def canDoctorGoHome(self):
    #To Do
    if self.dh.next==self.dh:
        print("No patients in the waitting room.Doctor can go home")
        return True

    print("patient are still waitting.doctor cannot go home")
    return False

  def cancelAll(self):
    #To Do
    self.dh.next==self.dh
    self.dh.prev==self.dh
    print("All appointments have been cancelled")
  def ReverseTheLine(self):
    #To Do
    if self.dh.next==self.dh:
        print("No patients in the waitting room to reserve.")
        return
    current= self.dh.next
    while current!=self.dh:
        temp=current.next
        current.next=current.prev
        current.prev=temp
        current=current.perv
    temp=self.dh.next
    self.dh.next=self.dh.prev
    self.dh.prev=temp
    print("The patient line has been reversed.")

def main():
    wrm=WRM()
    while True:

        print("**Welcome to Waiting Room Management System**")
        print("1.Add patient")
        print("2.sreve patient")
        print("3.Show All patient")
        print("4.Can doctor go home")
        print("5.Cancel All appoinments")
        print("6.Reverse the Line")
        print("7. Exit")
        choice= input("Enter your  choice (1-7):")
        if choice=="1":
            pid=int(input("Enter patient ID:"))
            name=input("Enter patient Name:")
            age=int(input("Enter patient ID:"))
            blood_group=input("Enter patient Blood Group:")
            wrm.registerPatient(pid,name,age,blood_group)
        elif choice=="2":
            wrm.servePatient()
        elif choice=="3":
            wrm.showAllPatient()
        elif choice=="4":
            wrm.canDoctorGoHome()
        elif choice=="5":
            wrm.cancelAll()
        elif choice=="5":
            wrm.ReverseTheLine()
        elif choice=="7":
            print("Exiting the waitting room")
            break
        else:
            print('Invalid choice.')

if __name__ == "__main__":
    main()
